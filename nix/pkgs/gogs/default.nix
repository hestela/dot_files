# This file was generated by go2nix.
{ stdenv, lib, buildGoPackage, fetchgit, fetchhg, fetchbzr, fetchsvn ,
  config, pkgs ? import <nixpkgs> {}, ...}:

#{ config, lib, pkgs, ... }:
with lib;

let
  cfg = config.services.gogs;
  gogs = buildGoPackage rec {
    name = "gogs-${version}";
    version = "20161016-${stdenv.lib.strings.substring 0 7 rev}";
    rev = "6bcff7828f117af8d51285ce3acba01a7e40a867";

    goPackagePath = "github.com/gogits/gogs";

    buildInputs = [ pkgs.sqlite pkgs.git ];

    src = fetchgit {
      inherit rev;
      url = "https://github.com/gogits/gogs";
      sha256 = "1arnqgrs6pwz1yagbmvy70amkhch80mi2h55l2kpnnr7xdj36dxh";
    };

    buildFlags = [ "-tags sqlite" ];
    goDeps = ./deps.nix;

    # Copy supporing files
    postInstall = ''
      mkdir -p $bin/
      cp -r $src/templates/ $bin/bin
      cp -r $src/public/ $bin/bin
    '';

  };

in

{
  options = {
    services.gogs = {
      enable = mkOption {
        type = types.bool;
        default = false;
        description = ''Whether to enable the go git server.'';
      };

      user = mkOption {
        default = "gogs";
        type = types.str;
        description = ''User the gogs server should execute under.'';
      };

      group = mkOption {
        default = "gogs";
        type = types.str;
        description = ''group the gogs server should execute under.'';
      };

      home = mkOption {
        default = "/var/lib/gogs";
        type = types.path;
        description = ''Home for the gogs user'';
      };
    };
  };

  config = mkIf cfg.enable {
      users.extraUsers = optional (cfg.user == "gogs") {
        name = "gogs";
        createHome = true;
        home = cfg.home;
        group = cfg.group;
        isNormalUser = true;
        useDefaultShell = true;
        uid = config.ids.uids.gogs;
      };

      systemd.services.gogs = {
        path = with pkgs; [
          git
          sqlite
          openssh
          bash
        ];
        description = "Gogs (Go Git Service)";
        wantedBy = [ "multi-user.target" ];
        after = [ "syslog.target" "network.target" ];
        script =''/var/lib/gogs/gogs web'';
        environment.HOME = "/var/lib/gogs";
        environment.USER = "gogs";
        # Copy gogs and requried files out of /nix/store
        preStart = ''
          # hax
          test -f /var/lib/gogs/skip-copy || {
            touch /var/lib/gogs/skip-copy
            cp -r ${pkgs.gogs}/bin/* /var/lib/gogs/
            chown -R gogs:gogs /var/lib/gogs/
          }
          mkdir -p /var/spool/gogs/
          chown -R gogs:gogs /var/spool/gogs/
        '';
        serviceConfig = {
          PermissionsStartOnly = true;
          Type = "simple";
          User = cfg.user;
          Group = "gogs";
          WorkingDirectory="/var/lib/gogs";
          Restart = "always";
        };
      };
  };
}
